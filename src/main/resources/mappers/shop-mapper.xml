<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shopMapper">

	<resultMap type="Product" id="productResultSet">
		<result column="PRODUCT_NO" property="productNo" />
		<result column="PRODUCT_NAME" property="productName" />
		<result column="STATUS" property="status" />
		<result column="SALES_COUNT" property="salesConunt" />
		<result column="PRICE" property="price" />
		<result column="DISCOUNT" property="discount" />
		<result column="CATEGORY_NO" property="categoryNo" />
		<result column="BRAND_CODE" property="brandCode" />
		<result column="ATTACHMENT" property="attachment" />
	</resultMap>

	<select id="selectList" resultMap="productResultSet" parameterType="String">
		SELECT PRODUCT_NO,
		PRODUCT_NAME,
		SALES_COUNT,
		PRICE,
		DISCOUNT,
		CATEGORY_NO,
		P.BRAND_CODE,
		FILE_PATH||CHANGE_NAME ATTACHMENT
		FROM PRODUCT P
		INNER JOIN
		PRODUCT_ATTACHMENT PT USING (PRODUCT_NO)
		WHERE P.STATUS = #{status}
		AND
		FILE_LEVEL=0
	</select>

	<select id="selectDetail" parameterType="_int"
		resultMap="productResultSet">
		SELECT PRODUCT_NO,
		PRODUCT_NAME,
		SALES_COUNT,
		PRICE,
		P.STATUS,
		DISCOUNT,
		CATEGORY_NO,
		P.BRAND_CODE
		FROM PRODUCT
		P
		INNER JOIN PRODUCT_ATTACHMENT pt USING (PRODUCT_NO)
		WHERE PRODUCT_NO = #{productNo}
		AND FILE_LEVEL = 0
	</select>
	
	<select id="selectReviewCount" parameterType="_int"
	resultType="_int">
	SELECT MAX(ROWNUM)
	FROM PRODUCT_REVIEW
	WHERE PRODUCT_NO=#{productNo}
	
	</select>
	
	<select id="selectReview"
	parameterType="com.kh.pjtMungHub.shop.model.vo.Review"
	resultType="com.kh.pjtMungHub.shop.model.vo.Review">
	SELECT REVIEW_NO reviewNo,
	REVIEW_CONTENT reviewContent,
	CREATE_DATE createDate,
	SCORE score,
	PRODUCT_NO productNo,
	R.USER_NO userNo,
	NAME userName,
	LIKE_COUNT likeCount
	FROM PRODUCT_REVIEW R
	JOIN MEMBER M ON (R.USER_NO = M.USER_NO)
	WHERE PRODUCT_NO=#{productNo}
	AND R.USER_NO=#{userNo}
	</select>
	
	<select id="selectScorePercent" parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.ScorePercent">
	SELECT 
	SCORE score,
	ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS percent
	FROM PRODUCT_REVIEW
	WHERE PRODUCT_NO = #{productNo}
	GROUP BY SCORE
	ORDER BY SCORE DESC
	</select>
	
	<select id="selectScoreAvg" parameterType="_int"
	resultType="_double">
	SELECT ROUND(AVG(SCORE),1) AVERAGE
	FROM PRODUCT_REVIEW
	WHERE PRODUCT_NO=#{productNo}
	
	</select>

	<select id="selectFavorite" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo" 
	resultType="com.kh.pjtMungHub.shop.model.vo.Favorite">
		SELECT USER_NO userNo,
		PRODUCT_NO productNo
		FROM FAVORITE
		WHERE PRODUCT_NO=#{productNo}
		AND USER_NO=#{userNo}
		AND DELETE_STATUS=#{justifying}
	</select>
	
	<select id="selectFavoriteList" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo" 
	resultType="com.kh.pjtMungHub.shop.model.vo.Favorite">
		SELECT USER_NO userNo,
		PRODUCT_NO productNo
		FROM FAVORITE
		WHERE USER_NO=#{userNo}
		AND DELETE_STATUS=#{justifying}
	</select>
	
	<insert id="convertFavorite" parameterType="com.kh.pjtMungHub.shop.model.vo.Favorite">
	MERGE INTO FAVORITE
	USING DUAL
	ON (PRODUCT_NO=#{productNo} AND USER_NO=#{userNo})
	WHEN MATCHED THEN
    UPDATE SET 
    DELETE_STATUS='N'
    DELETE
    WHERE DELETE_STATUS='N'
	WHEN NOT MATCHED THEN
     INSERT 
	(PRODUCT_NO,USER_NO)
	VALUES
	(#{productNo},#{userNo})
	</insert>
	
	<insert id="insertReview" parameterType='com.kh.pjtMungHub.shop.model.vo.Review'>
	INSERT INTO PRODUCT_REVIEW(
	REVIEW_NO,
	REVIEW_CONTENT,
	SCORE,
	PRODUCT_NO,
	USER_NO
	)VALUES(
	SEQ_REVIEW.NEXTVAL,
	#{reviewContent},
	#{score},
	#{productNo},
	#{userNo}
	)
	
	</insert>
	
	<update id="updateReview"
	parameterType="com.kh.pjtMungHub.shop.model.vo.Review">
	UPDATE PRODUCT_REVIEW SET
	REVIEW_CONTENT=#{reviewContent},
	SCORE=#{score}
	WHERE USER_NO=#{userNo}
	AND PRODUCT_NO=#{productNo}
	</update>
	
	<select id="selectCategory"
		resultType="com.kh.pjtMungHub.shop.model.vo.Category">
		SELECT CATEGORY_NO categoryNo,
		CATEGORY_NAME categoryName
		FROM PRODUCT_CATEGORY
	</select>
	<select id="selectBrand"
		resultType="com.kh.pjtMungHub.shop.model.vo.Brand">
		SELECT BRAND_CODE brandCode,
		BRAND_NAME brandeName
		FROM BRAND
	</select>

	<select id="selectReviewList" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="com.kh.pjtMungHub.shop.model.vo.Review">
	SELECT * FROM (
	SELECT REVIEW_NO reviewNo,
	REVIEW_CONTENT reviewContent,
	CREATE_DATE createDate,
	SCORE score,
	PRODUCT_NO productNo,
	R.USER_NO userNo,
	NAME userName,
	LIKE_COUNT likeCount
	FROM PRODUCT_REVIEW R
	JOIN MEMBER M ON (R.USER_NO = M.USER_NO)
	WHERE PRODUCT_NO=#{productNo}
	<if test="star!=0">
	AND SCORE=#{star}
	</if>
	<choose>
	<when test="justifying=='latest'">
	ORDER BY CREATE_DATE DESC
	</when>
	<otherwise>
	ORDER BY LIKE_COUNT DESC
	</otherwise>
	</choose>
	)
	<choose>
	<when test="justifying=='best'">
	WHERE ROWNUM BETWEEN 1 AND 4
	</when>
	<otherwise>
	</otherwise>
	</choose>

	</select>
	
	<select id="selectReviewReplyList" 
	resultType="com.kh.pjtMungHub.shop.model.vo.ReviewReply"
	parameterType="_int">
	SELECT REPLY_NO replyNo,
	REPLY_CONTENT replyContent,
	REVIEW_NO reviewNo,
    M.USER_NO userNo,
	NAME userName,
	CREATE_DATE createDate
	FROM PRODUCT_REVIEW_REPLY R
	JOIN MEMBER M ON R.USER_NO= M.USER_NO
	WHERE REVIEW_NO=${reviewNo}
	</select>
	
	<insert id="insertReviewReply"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ReviewReply">
	INSERT INTO PRODUCT_REVIEW_REPLY (
	REPLY_NO,
	REPLY_CONTENT,
	REVIEW_NO,
	USER_NO
	)VALUES(
	SEQ_RRPLY.NEXTVAL,
	#{replyContent},
	#{reviewNo},
	#{userNo}
	)
	</insert>
	
	<delete id="deleteReply" parameterType="_int">
	DELETE FROM PRODUCT_REVIEW_REPLY
     WHERE REPLY_NO = #{replyNo}
	</delete>
	
	<insert id="reviewLike"
	 parameterType="com.kh.pjtMungHub.shop.model.vo.Review">
	 MERGE INTO PRODUCT_REVIEW_LIKE
	USING DUAL
	ON (REVIEW_NO=#{reviewNo} AND USER_NO=#{userNo})
	WHEN MATCHED THEN
    UPDATE SET 
    DELETE_STATUS='N'
	WHEN NOT MATCHED THEN
     INSERT 
	(REVIEW_NO,USER_NO)
	VALUES
	(#{reviewNo},#{userNo})
	 </insert>
	 
	 <delete id="deleteLike">
	 DELETE FROM PRODUCT_REVIEW_LIKE
	 WHERE DELETE_STATUS='N'
	 </delete>
	 
	 <update id="updateLikeCount"
	  parameterType="com.kh.pjtMungHub.shop.model.vo.Review">
	 	UPDATE PRODUCT_REVIEW SET
		LIKE_COUNT = #{likeCount}
		WHERE REVIEW_NO=#{reviewNo}
	 </update>
	 
	 
	 <select id="selectQuestionCategory"
	 resultType="com.kh.pjtMungHub.shop.model.vo.Category">
	 SELECT CATEGORY_NO categoryNo,
	 		CATEGORY_NAME categoryName
	 FROM QUESTION_CATEGORY
	 </select>
	 
	 <select id="selectQuestionList" 
	  resultType="com.kh.pjtMungHub.shop.model.vo.Question"
	 parameterType="_int">
	 SELECT QUESTION_NO questionNo,
		PRODUCT_NO productNo,
		USER_NO userNo,
		NAME userName,
		QUESTION_CONTENT content,
		Q.CATEGORY_NO categoryNo,
		Q.CATEGORY_NAME categoryName,
		OPEN_STATUS openStatus,
		CREATE_DATE createDate
	FROM PRODUCT_QUESTION P
	JOIN QUESTION_CATEGORY Q ON P.CATEGORY_NO=Q.CATEGORY_NO
	JOIN MEMBER USING (USER_NO)
	WHERE PRODUCT_NO=#{productNo}
	ORDER BY CREATE_DATE DESC
	 </select>
	 
	 <select id="selectQuestionDetail"
	 resultType="com.kh.pjtMungHub.shop.model.vo.Question"
	 parameterType="_int">
	  SELECT QUESTION_NO questionNo,
		PRODUCT_NO productNo,
		USER_NO userNo,
		NAME userName,
		QUESTION_CONTENT content,
		Q.CATEGORY_NO categoryNo,
		Q.CATEGORY_NAME categoryName,
		OPEN_STATUS openStatus,
		CREATE_DATE createDate
	FROM PRODUCT_QUESTION P
	JOIN QUESTION_CATEGORY Q ON P.CATEGORY_NO=Q.CATEGORY_NO
	JOIN MEMBER USING (USER_NO)
	WHERE QUESTION_NO=#{questionNo}
	 </select>
	 
	 <insert id="insertQuestion"
	 parameterType="com.kh.pjtMungHub.shop.model.vo.Question">
	 INSERT INTO PRODUCT_QUESTION(
		QUESTION_NO,
		PRODUCT_NO,
		USER_NO,
		QUESTION_CONTENT,
		CATEGORY_NO,
		OPEN_STATUS
		)VALUES(
		SEQ_QUESTION.NEXTVAL,
		#{productNo},
		#{userNo},
		#{content},
		#{categoryNo},
		#{openStatus}
		)
	 </insert>
	 
	 
	 <select id="selectLikeCount" 
 	parameterType="com.kh.pjtMungHub.shop.model.vo.Review"
 	resultType="_int">
 	SELECT MAX(ROWNUM)
	FROM PRODUCT_REVIEW_LIKE
	WHERE REVIEW_NO=#{reviewNo}
 </select>
	 
	<select id="selectQuestionCount" 
	parameterType="_int"
	resultType="_int">
	SELECT MAX(ROWNUM)
	FROM PRODUCT_QUESTION
	WHERE PRODUCT_NO=#{productNo}
	</select>
	
	<select id="selectAnswer" parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.Answer">
	SELECT ANSWER_NO answerNo,
	QUESTION_NO questionNo,
	USER_NO userNo,
	ANSWER_CONTENT content,
	CREATE_DATE createDate
	FROM PRODUCT_ANSWER
	WHERE QUESTION_NO=#{questionNo}
	</select>
	
	<update id="updateQuestionStatus" parameterType="_int">
	UPDATE PRODUCT_QUESTION SET
	ANSWER_STATUS='Y'
	WHERE QUESTION_NO=#{questionNo}
	</update>
	
	<insert id="insertProduct" parameterType="Product">
		INSERT INTO PRODUCT(
		PRODUCT_NO,
		PRODUCT_NAME,
		PRICE,
		DISCOUNT,
		CATEGORY_NO,
		BRAND_CODE)
		VALUES(
		SEQ_PRODUCT.NEXTVAL,
		#{productName},
		#{price},
		#{discount},
		#{categoryNo},
		#{brandCode}
		)
	</insert>
	
	<update id="updateProduct" parameterType="Product">
	 UPDATE PRODUCT SET
		PRODUCT_NAME=#{productName},
		PRICE=#{price},
		DISCOUNT=#{discount},
		CATEGORY_NO=#{categoryNo},
		BRAND_CODE=#{brandCode}
	WHERE PRODUCT_NO=#{productNo}
	</update>

	<insert id="insertAttachment"
		parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
		INSERT ALL 
		<foreach collection="atList" item="arr">
		INTO PRODUCT_ATTACHMENT(
		FILE_LEVEL,
		ORIGIN_NAME,
		CHANGE_NAME,
		FILE_JUSTIFY,
		FILE_PATH,
		TYPE,
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
		</choose>
		)VALUES(
			#{arr.fileLev},
			#{arr.originName},
			#{arr.changeName},
			#{arr.fileJustify},
			#{arr.filePath},
			#{arr.type},
			<choose>
				<when test="justifying=='product'">
					SEQ_PRODUCT.CURRVAL
				</when>
				<when test="justifying=='review'">
					SEQ_REVIEW.CURRVAL
				</when>
				<when test="justifying=='brand'">
					SEQ_BRAND.CURRVAL
				</when>
			</choose>
			)
		</foreach>
		SELECT * FROM DUAL <!-- 없으면 오류남 -->
	</insert>
	
	<select id="selectAttachment" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="com.kh.pjtMungHub.shop.model.vo.Attachment">
		SELECT
		FILE_LEVEL fileLev,
		ORIGIN_NAME originName,
		CHANGE_NAME changeName,
		UPLOAD_DATE uploadDate,
		FILE_JUSTIFY fileJustify,
		FILE_PATH filePath,
		TYPE type,
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO productNo
			</when>
			<when test="justifying=='review'">
				REVIEW_NO reviewNo
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE brandNo
			</when>
		</choose>
		FROM PRODUCT_ATTACHMENT
		WHERE 
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=
			</when>
		</choose>
		#{number} <!-- 주요키를 담을 공통적으로 사용할 변수  -->
	AND FILE_LEVEL = #{fileLev}
	</select>
	
	<select id="selectAttachmentList" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo"
	resultType="com.kh.pjtMungHub.shop.model.vo.Attachment">
	SELECT
		FILE_LEVEL fileLev,
		ORIGIN_NAME originName,
		CHANGE_NAME changeName,
		UPLOAD_DATE uploadDate,
		FILE_JUSTIFY fileJustify,
		FILE_PATH filePath,
		TYPE type,
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO productNo
			</when>
			<when test="justifying=='review'">
				REVIEW_NO reviewNo
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE brandNo
			</when>
		</choose>
	FROM PRODUCT_ATTACHMENT
	WHERE 
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=
			</when>
		</choose>
		#{number} <!-- 주요키를 담을 공통적으로 사용할 변수  -->
	ORDER BY FILE_LEVEL
	</select>
	
	<update id="updateAttachment" parameterType="java.util.ArrayList">
	<foreach collection="atList" item="arr" index="i"
		open="DECLARE BEGIN" separator=";" close="; END;">
		MERGE INTO PRODUCT_ATTACHMENT
		USING DUAL
		ON(FILE_LEVEL=#{arr.fileLev} AND
		
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=#{number}
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=#{number}
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=#{number}
			</when>
		</choose>
		
		 )
		WHEN
		MATCHED THEN
		UPDATE SET
		FILE_PATH=#{arr.filePath},
		ORIGIN_NAME=#{arr.originName},
		CHANGE_NAME=#{arr.changeName},
		TYPE=#{arr.type},
		UPLOAD_DATE=SYSDATE
		WHERE 
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO=
			</when>
			<when test="justifying=='review'">
				REVIEW_NO=
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE=
			</when>
		</choose>
		#{number}
		WHEN NOT MATCHED
		THEN
		INSERT(
		FILE_LEVEL,
		ORIGIN_NAME,
		CHANGE_NAME,
		FILE_JUSTIFY,
		FILE_PATH,
		TYPE,
		<choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
		</choose>
		)VALUES(
			#{arr.fileLev},
			#{arr.originName},
			#{arr.changeName},
			#{arr.fileJustify},
			#{arr.filePath},
			#{arr.type},
			#{number}
			)
	</foreach>
	</update>
	
	<delete id="deleteAttachment" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	  DELETE FROM PRODUCT_ATTACHMENT
    WHERE FILE_LEVEL =#{fileLev}
    AND 
	<choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
		</choose>
		=#{number}
	
	</delete>
	
	<update id="rearrangeAttachment" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	 UPDATE PRODUCT_ATTACHMENT SET
	   FILE_LEVEL= FILE_LEVEL-1
	   WHERE FILE_LEVEL BETWEEN #{fileLev} AND 100
	   AND <choose>
			<when test="justifying=='product'">
				PRODUCT_NO
			</when>
			<when test="justifying=='review'">
				REVIEW_NO
			</when>
			<when test="justifying=='brand'">
				BRAND_CODE
			</when>
		</choose>=#{number}
	</update>

	<update id="stopItemPost" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	UPDATE PRODUCT SET 
	STATUS = #{justifying}
	WHERE PRODUCT_NO=#{productNo}
	</update>
	
	<delete id="deleteProductData" parameterType="_int">
	DELETE FROM PRODUCT
	WHERE STATUS='N'
	AND PRODUCT_NO=#{productNo}
	</delete>
	
	
	<select id="selectCartList" resultType="Cart"
		parameterType="_int">
		SELECT
		PRODUCT_NO productNo,
		P_AMOUNT amount,
		PRODUCT_NAME
		productName,
		PRICE price,
		DISCOUNT discount,
		BRAND_NAME brandName,
		CATEGORY_NAME categoryName,
		FILE_PATH || CHANGE_NAME img
		FROM
		SHOPPING_CART
		LEFT JOIN PRODUCT P
		USING(PRODUCT_NO)
		JOIN BRAND USING
		(BRAND_CODE)
		JOIN PRODUCT_CATEGORY USING (CATEGORY_NO)
		JOIN
		PRODUCT_ATTACHMENT USING (PRODUCT_NO)
		WHERE USER_NO = #{userNo}
		AND FILE_LEVEL= 0
	</select>

	<insert id="addCart" parameterType="Cart">
		MERGE INTO SHOPPING_CART
		USING DUAL
		ON(USER_NO=#{userNo} AND PRODUCT_NO = #{productNo})
		WHEN
		MATCHED THEN
		UPDATE SET P_AMOUNT = P_AMOUNT+#{amount}
		WHEN NOT MATCHED
		THEN
		INSERT (USER_NO,PRODUCT_NO,P_AMOUNT)
		VALUES(#{userNo},#{productNo},#{amount})
	</insert>
	
	<delete id="removeCartItem"
		parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
		DELETE FROM SHOPPING_CART
		WHERE USER_NO = #{userNo}
		AND PRODUCT_NO IN(
		<foreach collection="items" item="arr" separator=",">
		#{arr}
		</foreach>
		)
	</delete>
	<update id="updateCartAmount"
	parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
		UPDATE SHOPPING_CART SET
		P_AMOUNT = P_AMOUNT+#{amount}
		WHERE PRODUCT_NO = #{productNo}
		AND USER_NO = #{userNo}
	</update>
	
	<select id="selectCartCount" resultType="_int" parameterType="_int">
	SELECT MAX(ROWNUM)
	FROM SHOPPING_CART
	WHERE USER_NO=#{userNo}
	</select>
	
	<update id="chooseShipInfo">
		UPDATE SHIP_INFO SET
		CHOOSED = 'N'
		WHERE USER_NO = #{userNo}
	</update>
	<!--insert되기 전에 해당 유저아이디에 저장된 배송정보 체크아웃 풀기  -->
	
	<insert id="insertShipInfo" 
	parameterType="com.kh.pjtMungHub.shop.model.vo.ShipInfo">
	INSERT INTO SHIP_INFO(
	INFO_NO,
	USER_NO,
	ADDRESS,
	ADDRESS_DETAIL,
	RECIPIENT,
	PHONE
	)VALUES(
	SEQ_SHIP_INFO.NEXTVAL,
	#{userNo},
	#{address},
	#{addressDetail},
	#{recipient},
	#{phone}
	)
	</insert>
	
	<update id="updateSalesCount"
	parameterType="Product">
	<foreach collection="list" item="arr">
	UPDATE PRODUCT SET
	SALES_COUNT = SALES_COUNT+#{arr.quantity}
	WHERE PRODUCT_NO = #{arr.productNo}
	</foreach>
	</update>
	
	
	<select id="selectShipInfoList"
	 resultType="com.kh.pjtMungHub.shop.model.vo.ShipInfo" 
	 parameterType="_int">
	SELECT INFO_NO infoNo,
	USER_NO userNo,
	ADDRESS address,
	ADDRESS_DETAIL addressDetail,
	RECIPIENT recipient,
	PHONE phone,
	CHOOSED choosed
	FROM SHIP_INFO
	WHERE USER_NO = #{userNo}
	ORDER BY CHOOSED DESC
	</select>
	
	<update id="changeShipInfo" parameterType="com.kh.pjtMungHub.shop.model.vo.ShipInfo">
	UPDATE SHIP_INFO SET CHOOSED = CASE
	WHEN INFO_NO=#{infoNo} THEN 'Y'
	ELSE 'N'
   	END
    WHERE USER_NO=#{userNo}
	</update>
	
		
	<delete id="removeShipInfo" parameterType="com.kh.pjtMungHub.shop.model.vo.ShipInfo">
		DELETE FROM SHIP_INFO
		WHERE INFO_NO=#{infoNo}
	</delete>
	
	<select id="selectCartItemList" resultType="Cart" parameterType="com.kh.pjtMungHub.shop.model.vo.ParameterVo">
	SELECT
		PRODUCT_NO productNo,
		P_AMOUNT amount,
		PRODUCT_NAME productName,
		PRICE price,
		DISCOUNT discount,
		BRAND_NAME brandName,
		CATEGORY_NAME categoryName,
		FILE_PATH || CHANGE_NAME img
		FROM
		SHOPPING_CART
		LEFT JOIN PRODUCT P
		USING(PRODUCT_NO)
		JOIN BRAND USING
		(BRAND_CODE)
		JOIN PRODUCT_CATEGORY USING (CATEGORY_NO)
		JOIN
		PRODUCT_ATTACHMENT USING (PRODUCT_NO)
		WHERE USER_NO = #{userNo}
		AND FILE_LEVEL= 0
		AND PRODUCT_NO IN(
	<foreach collection="checkedItem" item="arr" separator=",">
	#{arr}
	</foreach>
	)	

	</select>
	
	<select id="selectShipInfo"
	resultType="com.kh.pjtMungHub.shop.model.vo.ShipInfo" 
	 parameterType="_int">
	SELECT
	INFO_NO infoNo,
	USER_NO userNo,
	ADDRESS address,
	ADDRESS_DETAIL addressDetail,
	RECIPIENT recipient,
	PHONE phone,
	CHOOSED choosed
	FROM SHIP_INFO
	WHERE USER_NO = #{userNo}
	AND CHOOSED= 'Y'
	</select>
	
	<select id="selectShipInfo2"
	resultType="com.kh.pjtMungHub.shop.model.vo.ShipInfo" 
	 parameterType="_int">
	 SELECT *
	 FROM(
	SELECT
	INFO_NO infoNo,
	USER_NO userNo,
	ADDRESS address,
	ADDRESS_DETAIL addressDetail,
	RECIPIENT recipient,
	PHONE phone,
	CHOOSED choosed
	FROM SHIP_INFO
	WHERE USER_NO = #{userNo}
	ORDER BY CHOOSED DESC
	)
	WHERE ROWNUM=1
	</select>
	
	<insert id="insertOrderInfo" parameterType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	INSERT INTO PRODUCT_ORDER(
	MERCHANT_UID,
	SHOPPING_LIST,
	ITMES_QUANTITY,
	TOTAL_PRICE,
	USER_NO,
	MESSAGE,
	ADDRESS,
	RECIPIENT,
	PHONE
	)VALUES(
	#{merchantUid},
	#{items},
	#{itemsQuantity},
	#{totalPrice},
	#{userNo},
	#{message.message},
	#{address},
	#{recipient},
	#{phone}
	)
	</insert>
	
	<select id="selectOrder" parameterType="String" resultType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
	SELECT MERCHANT_UID merchantUid
	,ORDER_PROCESS process
	,SHOPPING_LIST items
	,ITMES_QUANTITY itemsQuantity
	,TOTAL_PRICE totalPrice
	,USER_NO userNo
	,PAY_DATE payDate
	,MESSAGE message
	,ADDRESS address
	,PHONE phone
	,RECIPIENT recipient
	FROM PRODUCT_ORDER
	WHERE MERCHANT_UID=#{merchantUid}
	</select>
	
	<select id="selectOrderList" parameterType="_int" resultType="com.kh.pjtMungHub.shop.model.vo.POrderInfo">
		SELECT MERCHANT_UID merchantUid
		,ORDER_PROCESS process
		,SHOPPING_LIST items
		,ITMES_QUANTITY itemsQuantity
		,TOTAL_PRICE totalPrice
		,USER_NO userNo
		,PAY_DATE payDate
		,MESSAGE message
		,ADDRESS address
		,PHONE phone
		,RECIPIENT recipient
		FROM PRODUCT_ORDER
		WHERE USER_NO=#{userNo}
		ORDER BY PAY_DATE DESC
	</select>
	
	<update id="updatePoint" parameterType="com.kh.pjtMungHub.shop.model.vo.Point">
	MERGE INTO SHOP_POINT
		USING DUAL
		ON(USER_NO=#{userNo})
		WHEN
		MATCHED THEN
		UPDATE SET POINT = POINT+#{point}
		WHEN NOT MATCHED
		THEN
		INSERT (USER_NO,POINT)
		VALUES(#{userNo},#{point})
	</update>
	
	<select id="selectPoint" 
	parameterType="_int"
	resultType="com.kh.pjtMungHub.shop.model.vo.Point">
	SELECT POINT point,
	USER_NO userNo
	FROM SHOP_POINT
	WHERE USER_NO=${userNo}
	</select>

</mapper>